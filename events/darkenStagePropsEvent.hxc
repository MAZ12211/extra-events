import funkin.play.PlayState;
import funkin.Conductor;
import funkin.modding.module.Module;
import flixel.FlxG;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;
import flixel.FlxCamera;
import funkin.graphics.FunkinSprite;
import funkin.util.ReflectUtil;

import funkin.play.event.SongEvent;
import funkin.data.event.SongEventSchema;

import funkin.modding.PolymodErrorHandler;

import funkin.modding.module.ModuleHandler;
import funkin.modding.module.ScriptedModule;
import funkin.data.event.SongEventRegistry;
import funkin.play.event.ScriptedSongEvent;

import funkin.play.stage.StageProp;
import flixel.util.FlxTimer;
import flixel.util.FlxColor;

class DarkenStagePropsFixes extends ScriptedModule {
  var shouldFixDarkenEvent:Bool = true;

  public function new(){
    super('extra-events-darkenStagePropsFixes');
  }

  // function onGameOver(event:ScriptEvent){
  //   super.onGameOver(event);
  //   if (PlayState.instance.camGame != null && PlayState.instance.camGame.angle != 0 && shouldFixRotateEvent) PlayState.instance.camGame.angle = 0;
  //   if (PlayState.instance.camHUD != null && PlayState.instance.camHUD.angle != 0 && shouldFixRotateEvent) PlayState.instance.camHUD.angle = 0;
	// }

  // function onSongRetry(event:ScriptEvent){
  //   super.onSongRetry(event);
  //   if (PlayState.instance.camGame != null && PlayState.instance.camGame.angle != 0 && shouldFixRotateEvent) PlayState.instance.camGame.angle = 0;
  //   if (PlayState.instance.camHUD != null && PlayState.instance.camHUD.angle != 0 && shouldFixRotateEvent) PlayState.instance.camHUD.angle = 0;
  // }
}

class DarkenEffectHandler extends ScriptedModule {
  function new() {
    super("extra-events-darkenEffectHandler", 10);
  }
  public var bgSprite:FunkinSprite = null;
  public var scale:Int = 20;
  /*
    * If you think the black square doesn't cover your stage entirely, increase this via
    * ModuleHandler.getModule(extra-events-darkenEffectHandler').scriptGet('scale') = 50;
    * in onSongLoaded function I'd say
  */

  override function onSongLoaded(e) {
    super.onSongLoaded(e);
    var bf = PlayState.instance.currentStage.getBoyfriend();
    var gf = PlayState.instance.currentStage.getGirlfriend();
    var dad = PlayState.instance.currentStage.getDad();
    bgSprite = new FunkinSprite(0, 0).makeSolidColor(FlxG.width * scale, FlxG.height * scale, 0xFF000000);
    bgSprite.screenCenter();
    bgSprite.scrollFactor.set(0, 0);
    bgSprite.zIndex = Math.min(bf?.zIndex, gf?.zIndex, dad?.zIndex) - 1;
    bgSprite.alpha = 1.0;
    // for (chars in [bf, gf, dad]){
    //   bgSprite.zIndex -= chars.zIndex;
    // }
    PlayState.instance.currentStage.add(bgSprite);
    PlayState.instance.currentStage.refresh();
    bgSprite.cameras = [PlayState.instance.camGame];
    // for (chars in [bf, gf, dad]){
    //   PlayState.instance.insert(PlayState.instance.members.indexOf(chars) - 1, bgSprite);
    // }

    // for (stageProp in PlayState.instance.currentStage.members) {
    //   // Determine if the stage prop is something that should be excluded from darkening.
    //   if (Std.isOfType(stageProp, StageProp)) {
    //     if (stageProp.name == "bf" || stageProp.name == "dad" || stageProp.name == "gf" /*This refers to the player.*/){
    //       // Exclude.
    //       continue;
    //     }
    //   }
      
    // }
  }
}

class DarkenStagePropsEvent extends ScriptedSongEvent {
  function new() {
    super("extra-events-darkenStagePropsEvent");
  }

  public var eventTitle:String = "HEAVY WIP | Extra Events | Darken Stage Props";

  public var DEFAULT_DURATION:Float = 4.0;
  public var DEFAULT_ALPHA:Float = 0.5;
  
  public var colorTween:FlxTween = null;

  override function handleEvent(data):Void {
    if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
    if (PlayState.instance.isMinimalMode) return;

    bgSprite = new FunkinSprite(0, 0).makeSolidColor(FlxG.width * 2, FlxG.height * 2, 0xFF000000);
    bgSprite.cameras = [PlayState.instance.camGame];

    // Add to playstate
    PlayState.instance.add(bgSprite);
    PlayState.instance.refresh();

    var duration:Float = data.getFloat('duration') != null ? data.getFloat('duration') : DEFAULT_DURATION;
    var alpha:Float = data.getFloat('alpha') != null ? data.getFloat('alpha') : DEFAULT_ALPHA;

    var durSeconds = Conductor.instance.stepLengthMs * duration / 1000;

    if (duration < 0) {
      PolymodErrorHandler.showAlert("Event execution error for " + eventTitle, "Duration cannot be less than 0.");
      return;
    }
    darkenStageProps(durSeconds, alpha);
  }

  function darkenStageProps(?dur:Float, ?alpha:Float):Void {
    var durArg = dur;
    var alphaArg = alpha;
    cancelColorTween();
    // Darken the background, then fade it back.
    for (stageProp in PlayState.instance.currentStage.members) {
      // Determine if the stage prop is something that should be excluded from darkening.
      if (Std.isOfType(stageProp, StageProp)) {
        if (stageProp.name == "bf" || stageProp.name == "dad" || stageProp.name == "gf" /*This refers to the player.*/){
          // Exclude.
          continue;
        }
      }
      
      // // stageProp.color = 0xFF111111;
      new FlxTimer().start(1/24, (tmr) ->
      {
        colorTween = FlxTween.color(stageProp, durArg, stageProp.color, FlxColor.BLACK);
        FlxTween.tween(stageProp, { alpha: alphaArg }, durArg);
      });
      
    }
  }

  public function cancelColorTween() {
    if (colorTween != null) colorTween.cancel();
  }

  public override function getIconPath(){
    return 'ui/chart-editor/events/extra-events-darkenStageEvent';
  }

  public override function getTitle() {
    return eventTitle;
  }

  override function getEventSchema() {
    return [
      {
        name: 'duration',
        title: 'Duration',
        defaultValue: 4.0,
        step: 0.5,
        min: 0.5,
        type: "float",
        units: 'steps'
      },
      {
        name: 'alpha',
        title: 'Alpha',
        defaultValue: 0.5,
        step: 0.1,
        min: 0,
        max: 1,
        type: "float",
      }
    ];
  }
}
