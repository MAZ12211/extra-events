import funkin.play.PlayState;
import funkin.Conductor;
import flixel.FlxG;

import funkin.play.event.SongEvent;
import funkin.data.event.SongEventSchema;

import funkin.modding.PolymodErrorHandler;
// import flixel.util.FlxColor; // A dream wish for now
import funkin.play.event.ScriptedSongEvent;

import funkin.ui.options.OptionsState;
import flixel.util.FlxSave;
import funkin.modding.module.ModuleHandler;
import funkin.modding.module.ScriptedModule;
import funkin.data.event.SongEventRegistry;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import funkin.Preferences;
import flixel.util.FlxTimer;
import funkin.play.PauseSubState;

class AddLyricsManager extends ScriptedModule {
  function new() {
      super("extra-events-addLyricsManager");
  }
  public var save:FlxSave;

  override function onCreate(event) {
    super.onCreate(event);
    save = new FlxSave();
    save.bind("extra-events-addLyrics");
    save.data.isLyricsEnabled = (save.data.isLyricsEnabled != null) ? save.data.isLyricsEnabled : true; // Default is true

    save.flush();
  }

override function onStateChangeEnd(event) {
    super.onStateChangeEnd(event);
    if (Std.isOfType(event.targetState, OptionsState)) {
        var prefs = event.targetState.optionsCodex.pages.get('preferences');
        if (prefs != null) {
            prefs.createPrefItemCheckbox("Show Lyrics", "If disabled, charts with placed lyrics will be ignored.", (value:Bool) -> {
                save.data.isLyricsEnabled = value;
                save.flush();
            }, save.data.isLyricsEnabled);
        }
    }
  }
}

class AddLyricsEvent extends ScriptedSongEvent {
    function new() {
        super("extra-events-addLyricsEvent");
    }
    // Some of the code is taken or based off of Spooky Mix's lyric event by Denoohay
    // Some properties are either new, missing, implemented differently, or scrapped intentionally

    public var eventTitle:String = "Extra Events | Add Lyrics";
    public var isEnabled:Bool;
    
    public static var lyricObj:FlxText;
    public static var currentTimer:FlxTimer;

    public var DEFAULT_TEXT:String = "Hello!";
    public var DEFAULT_DURATION:Float = 4.0;
    public var DEFAULT_FONT:String = "vcr";
    public var DEFAULT_FONTSIZE:Float = 32.0;
    public var DEFAULT_COLOR:Int = 12; // White

    public var DEFAULT_ITALIC:Bool = false;
    public var DEFAULT_BOLD:Bool = false;
    public var DEFAULT_HAS_ANTIALIASING:Bool = false;
    
    public var DEFAULT_ISCENTERED:Bool = false; // No real point in having custom x and y position. ISCENTERED is used for if you want the lyric to be the on the middle of the screen
    public var DEFAULT_OPACITY:Float = 1.0;
    public var DEFAULT_LATTERSPACING:Float = 0.0;
    
    public var DEFAULT_BORDERCOLOR:Int = 0; // Black
    public var DEFAULT_BORDERSIZE:Float = 1.0; // min is 0 instead of 0.1

    public var DEFAULT_ISBEHINDSTRUMLINES:Bool = true;

    override function handleEvent(data):Void {
        if (PlayState.instance == null || PlayState.instance.currentStage == null) return;

        // Prevents stacking the current text by deleting the current one and reseting the timer
        if (lyricObj != null) {
          if (currentTimer != null) {
              currentTimer.cancel();
              currentTimer.destroy();
              currentTimer = null;
            }
            lyricObj.kill();
            lyricObj.destroy();
            lyricObj = null;
        }

        // Save Stuff
        var lyricsManager = ModuleHandler.getModule("extra-events-addLyricsManager");
        isEnabled = lyricsManager.scriptGet("save").data.isLyricsEnabled;
        if (lyricsManager == null || !isEnabled) return;

        var text:String = data.getString('text') != null ? data.getString('text') : DEFAULT_TEXT;
        var duration:Float = data.getFloat('duration') != null ? data.getFloat('duration') : DEFAULT_DURATION;
        var font:String = data.getString('font') != null ? data.getString('font') : DEFAULT_FONT;
        var fontSize:Float = data.getFloat('fontSize') != null ? data.getFloat('fontSize') : DEFAULT_FONTSIZE;
        var textColor:Int = data.getInt('textColor') != null ? data.getInt('textColor') : DEFAULT_COLOR;
        
        var isItalic:Bool = data.getBool('isItalic') != null ? data.getBool('isItalic') : DEFAULT_ITALIC;
        var isBold:Bool = data.getBool('isBold') != null ? data.getBool('isBold') : DEFAULT_BOLD;
        var hasAntiAliasing:Bool = data.getBool('hasAntiAliasing') != null ? data.getBool('hasAntiAliasing') : DEFAULT_HAS_ANTIALIASING;
        
        var isCentered:Bool = data.getBool('isCentered') != null ? data.getBool('isCentered') : DEFAULT_ISCENTERED;
        var opacity:Float = data.getFloat('opacity') != null ? data.getFloat('opacity') : DEFAULT_OPACITY;
        var letterSpacing:Float = data.getFloat('letterSpacing') != null ? data.getFloat('letterSpacing') : DEFAULT_LATTERSPACING;
        
        var textBorderColor:Int = data.getInt('textBorderColor') != null ? data.getInt('textBorderColor') : DEFAULT_BORDERCOLOR;
        var borderSize:Float = data.getFloat('borderSize') != null ? data.getFloat('borderSize') : DEFAULT_BORDERSIZE;

        var isBehindStrumLines:Bool = data.getBool('isBehindStrumLines') != null ? data.getBool('isBehindStrumLines') : DEFAULT_ISBEHINDSTRUMLINES;


        var durSeconds = Conductor.instance.stepLengthMs * duration / 1000;
        if (duration <= 0) {
          PolymodErrorHandler.showAlert("Event execution error for " + eventTitle, "Duration cannot be less or equal to 0.\nDuration must be greater than 0.");
        }

        // I'm sure they'll have a color picker at some point
        switch (textColor) {
          case 0: // Black
            textColor = 0xFF000000;
          case 1: // Blue
            textColor = 0xFF0000FF;
          case 2: // Brown
            textColor = 0xFFA52A2A;
          case 3: // Cyan
            textColor = 0xFF00FFFF;
          case 4: // Gray
            textColor = 0xFF808080;
          case 5: // Green
            textColor = 0xFF008000;
          case 6: // Lime
            textColor = 0xFF00FF00;
          case 7: // Magenta
            textColor = 0xFFFF00FF;
          case 8: // Orange
            textColor = 0xFFFFA500;
          case 9: // Purple
            textColor = 0xFF800080;
          case 10: // Red
            textColor = 0xFFFF0000;
          case 11: // Transparent
            textColor = 0x00000000;
          case 12: // White
            textColor = 0xFFFFFFFF;
          case 13: // Yellow
            textColor = 0xFFFFFF00;
        }

        switch (textBorderColor) {
          case 0: // Black
            textBorderColor = 0xFF000000;
          case 1: // Blue
            textBorderColor = 0xFF0000FF;
          case 2: // Brown
            textBorderColor = 0xFFA52A2A;
          case 3: // Cyan
            textBorderColor = 0xFF00FFFF;
          case 4: // Gray
            textBorderColor = 0xFF808080;
          case 5: // Green
            textBorderColor = 0xFF008000;
          case 6: // Lime
            textBorderColor = 0xFF00FF00;
          case 7: // Magenta
            textBorderColor = 0xFFFF00FF;
          case 8: // Orange
            textBorderColor = 0xFFFFA500;
          case 9: // Purple
            textBorderColor = 0xFF800080;
          case 10: // Red
            textBorderColor = 0xFFFF0000;
          case 11: // Transparent
            textBorderColor = 0x00000000;
          case 12: // White
            textBorderColor = 0xFFFFFFFF;
          case 13: // Yellow
            textBorderColor = 0xFFFFFF00;
        }

        lyricObj = new FlxText(0, 0, FlxG.width); // x, y, width
        lyricObj.text = text;
        lyricObj.setFormat(Paths.font(font + ".ttf"), fontSize, textColor, "center", FlxTextBorderStyle.OUTLINE, textBorderColor);
        lyricObj.borderSize = borderSize;
        lyricObj.alpha = opacity;
        lyricObj.letterSpacing = letterSpacing;
        lyricObj.italic = isItalic;
        lyricObj.bold = isBold;
        lyricObj.antialiasing = hasAntiAliasing;
        lyricObj.cameras = [PlayState.instance.camHUD];
        lyricObj.screenCenter(isCentered ? 0x11 : 0x01); // I love ternary operators
        if (!isCentered) lyricObj.y = (Preferences.downscroll ? FlxG.height * 0.2 : FlxG.height * 0.7); // Dynamic positioning

        if (PlayState.instance.opponentStrumline == null) return;
        for (strumLine in [PlayState.instance.playerStrumline, PlayState.instance.opponentStrumline]) {
          if (strumLine != null) {
            PlayState.instance.insert(PlayState.instance.members.indexOf(strumLine) + (!isBehindStrumLines ? 1 : -1), lyricObj); // The best way to handle layering hands down
          }
        }

        if (lyricObj.font == null) {
          trace("Font property is left empty.\nApplying found default font.");
        }

        currentTimer = new FlxTimer().start(durSeconds, function(t:FlxTimer) {
          if (lyricObj != null) {
            lyricObj.kill();
            lyricObj.destroy();
            lyricObj = null;
          }
          currentTimer = null;
        });

    }

    public override function getTitle() {
        return eventTitle;
    }

    // public override function getIconPath(){
    //   return 'ui/chart-editor/events/extra-events-cameraFadeEvent';
    // }


    override function getEventSchema()
        {
          return [
            {
              name: 'text',
              title: 'Text',
              defaultValue: "Hello!",
              type: "string"
            },
            {
              name: 'duration',
              title: 'Duration',
              defaultValue: 4.0,
              step: 1.0,
              type: "float",
              units: 'steps'
            },
            {
              name: 'textColor',
              title: 'Text Color',
              defaultValue: 12,
              type: "enum",
              keys: [
                "Black" => 0,
                "Blue" => 1,
                "Brown" => 2,
                "Cyan" => 3,
                "Gray" => 4,
                "Green" => 5,
                "Lime" => 6,
                "Magenta" => 7,
                "Orange" => 8,
                "Purple" => 9,
                "Red" => 10,
                "Transparent" => 11,
                "White" => 12,
                "Yellow" => 13
              ]
            },
            {
              name: 'font',
              title: 'Font',
              defaultValue: 'vcr',
              type: "string",
              units: '.ttf'
            },
            {
              name: 'fontSize',
              title: 'Font Size',
              defaultValue: 32,
              min: 1.0,
              step: 1.0,
              type: "float"
            },
            {
              name: "isBehindStrumLines",
              title: "Put it behind Strumlines",
              defaultValue: true,
              type: "bool"
            },
            {
              name: "isItalic",
              title: "Italic",
              defaultValue: false,
              type: "bool"
            },
            {
              name: "isBold",
              title: "Bold",
              defaultValue: false,
              type: "bool"
            },
            {
              name: "hasAntiAliasing",
              title: "Anti-Aliasing",
              defaultValue: false,
              type: "bool"
            },
            {
              name: "isCentered",
              title: "Place in center", /* Imagine if I could explain any of this, base game devs, please, let me add tooltips for these things */
              defaultValue: false,
              type: "bool"
            },
            {
              name: 'opacity',
              title: 'Opacity',
              defaultValue: 1.0,
              step: 0.1,
              min: 0.1,
              max: 1.0,
              type: "float"
            },
            {
              name: 'letterSpacing',
              title: 'Letter Spacing',
              defaultValue: 0.0,
              step: 0.1,
              min: 0.0,
              type: "float"
            },
            {
              name: 'textBorderColor',
              title: 'Text Border Color',
              defaultValue: 0,
              type: "enum",
              keys: [
                "Black" => 0,
                "Blue" => 1,
                "Brown" => 2,
                "Cyan" => 3,
                "Gray" => 4,
                "Green" => 5,
                "Lime" => 6,
                "Magenta" => 7,
                "Orange" => 8,
                "Purple" => 9,
                "Red" => 10,
                "Transparent" => 11,
                "White" => 12,
                "Yellow" => 13
              ]
            },
            {
              name: 'borderSize',
              title: 'Border Size',
              defaultValue: 1.25,
              step: 0.01,
              min: 0, /*In case someone doesn't want a border like me*/
              max: 10.0,
              type: "float"
            }
          ];
        }
}