import funkin.play.PlayState;
import funkin.modding.events.ScriptEvent;
import funkin.modding.module.Module;
import funkin.ui.AtlasText;
import flixel.FlxG;
import flixel.util.FlxTimer;
import flixel.tweens.FlxEase;
import funkin.graphics.FunkinSprite;
import funkin.Paths;
import openfl.utils.Assets;
import funkin.play.PlayState;
import funkin.Conductor;
import flixel.tweens.FlxTween;
import flixel.FlxCamera;
import funkin.util.ReflectUtil;
import openfl.filters.ShaderFilter;
import funkin.modding.base.ScriptedFlxRuntimeShader;
// https://github.com/HaxeFlixel/flixel-addons/blob/671ad890e71628bfe43403241ede0d933513e6cf/flixel/addons/display/FlxRuntimeShader.hx
import flixel.addons.display.FlxRuntimeShader;

import funkin.play.event.SongEvent;

class VignetteHandler extends SongEvent {
    function new() {
        super("vignette");
    }
    
    public var vignetteShader:FlxRuntimeShader;
    public var vignetteFilter:ShaderFilter;

    public var eventTitle:String = "Vignette Effect\n(WIP IT DOES NOT WORK)";

    public var DEFAULT_STRENGTH:Float = 15.0;
    public var strength_tween:FlxTween = null;

    public var DEFAULT_REACH:Float = 0.25;
    public var reach_tween:FlxTween = null;

    public var DEFAULT_DURATION:Float = 4.0;
    public var DEFAULT_EASE:String = 'linear';

    public override function handleEvent(data:SongEventData):Void {
        // Does nothing if there is no PlayState camera or stage.
        if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
        
        // Does nothing if we are minimal mode.
        if (PlayState.instance.isMinimalMode) return;

        vignetteShader = ScriptedFlxRuntimeShader.init('VignetteEffect');
    
        vignetteFilter = new ShaderFilter(vignetteShader);
        if (vignetteFilter != null) {
          FlxG.camera.filters = [vignetteFilter];
        }

        var strength:Float = data.getFloat('strength') != null ? vignetteShader.scriptCall("setStrength", [data.getFloat('strength')]) : vignetteShader.scriptCall("setStrength", [DEFAULT_STRENGTH]);
        var reach:Float = data.getFloat('reach') != null ? vignetteShader.scriptCall("setReach", [data.getFloat('reach')]) : vignetteShader.scriptCall("setReach", [DEFAULT_REACH]);
        
        var duration:Float = data.getFloat('duration') != null ? data.getFloat('duration') : DEFAULT_DURATION;
        var ease:String = data.getString('ease') != null ? data.getString('ease') : DEFAULT_EASE;
        
        var durSeconds = Conductor.instance.stepLengthMs * duration / 1000;
        var easeFunction:Null<Float->Float>;

        if (duration <= 0) {
          PolymodErrorHandler.showAlert("Event execution error for " + eventTitle, "Duration cannot be less or equal to 0.\nDuration must be greater than 0.");
        }

        switch (ease) {
            case 'INSTANT': // Cancel the tween here.
              if (strength_tween != null) strength_tween.cancel();
              if (reach_tween != null) reach_tween.cancel();
              return;
            default:
              easeFunction = ReflectUtil.getAnonymousField(FlxEase, ease);
              if (easeFunction == null){
                trace("Invalid easing function: " + ease);
                return;
              }
              createVig(strength, reach, durSeconds, easeFunction);
        }
        // trace("Strength: " + strength + " | Reach: " + reach + " | Duration: " + duration + " | Easing: " + ease + " | Ease Function: " + easeFunction);
    }

    public function createVig(?strength:Float, ?reach:Float, ?duration:Float, ?ease:Null<Float->Float>):Void {
      cancelCurrentVigTween();
      
      var startStrength = vignetteShader.getFloat('uStrength');
      var startReach = vignetteShader.getFloat('uReach');
    
      strength_tween = FlxTween.num(startStrength, strength, duration, {ease: ease}, function(value:Float) {
        vignetteShader.scriptCall("setStrength", [value]);
      });
    
      reach_tween = FlxTween.num(startReach, reach, duration, {ease: ease}, function(value:Float) {
        vignetteShader.scriptCall("setReach", [value]);
      });
    }

    public override function getTitle() {
        return eventTitle;
    }

    public function cancelCurrentVigTween(){
      if (vignetteFilter != null){
        if (strength_tween != null) strength_tween.cancel();
        if (reach_tween != null) reach_tween.cancel();
      }
    }

    public override function getEventSchema(){
          return [
            {
              name: 'strength',
              title: 'Strength',
              defaultValue: 15.0,
              step: 0.1,
              type: "float",
              units: ''
            },
            {
              name: 'reach',
              title: 'Reach',
              defaultValue: 0.25,
              step: 0.01,
              type: "float",
              units: ''
            },
            {
              name: 'duration',
              title: 'Duration',
              defaultValue: 4.0,
              step: 0.5,
              type: "float",
              units: 'steps'
            },
            {
              name: 'ease',
              title: 'Easing Type',
              defaultValue: 'linear',
              type: "enum",
              keys: [
                'Linear' => 'linear',
                'Instant (Ignores Duration)' => 'INSTANT',
                'Sine In' => 'sineIn',
                'Sine Out' => 'sineOut',
                'Sine In/Out' => 'sineInOut',
                'Quad In' => 'quadIn',
                'Quad Out' => 'quadOut',
                'Quad In/Out' => 'quadInOut',
                'Cube In' => 'cubeIn',
                'Cube Out' => 'cubeOut',
                'Cube In/Out' => 'cubeInOut',
                'Quart In' => 'quartIn',
                'Quart Out' => 'quartOut',
                'Quart In/Out' => 'quartInOut',
                'Quint In' => 'quintIn',
                'Quint Out' => 'quintOut',
                'Quint In/Out' => 'quintInOut',
                'Expo In' => 'expoIn',
                'Expo Out' => 'expoOut',
                'Expo In/Out' => 'expoInOut',
                'Smooth Step In' => 'smoothStepIn',
                'Smooth Step Out' => 'smoothStepOut',
                'Smooth Step In/Out' => 'smoothStepInOut',
                'Elastic In' => 'elasticIn',
                'Elastic Out' => 'elasticOut',
                'Elastic In/Out' => 'elasticInOut'
              ]
            }
          ];
        }
}