import funkin.play.PlayState;
import funkin.Conductor;
import flixel.FlxG;

import funkin.play.event.SongEvent;
import funkin.data.event.SongEventSchema;

import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;
import funkin.util.ReflectUtil;

import funkin.modding.PolymodErrorHandler;
import funkin.play.event.ScriptedSongEvent;

import funkin.modding.module.ModuleHandler;
import funkin.modding.module.ScriptedModule;
import funkin.data.event.SongEventRegistry;
import funkin.util.Constants;
import funkin.Preferences;

class movePlayerStrumlineFixes extends ScriptedModule {

  var shouldFix_MPSLEvent:Bool = true;

  public function new(){
    super('extra-events-movePlayerStrumlineFixes');
  }

  function onSongRetry(event:ScriptEvent){
    super.onSongRetry(event);
    if (FlxG.onMobile) return;
    if (PlayState.instance.camHUD != null && shouldFix_MPSLEvent) {
      
      PlayState.instance.playerStrumline.x = FlxG.width / 2 + Constants.STRUMLINE_X_OFFSET; // Resets the player strumline to its default position
      if (PlayState.instance.opponentStrumline.x != Constants.STRUMLINE_X_OFFSET) PlayState.instance.opponentStrumline.x = Constants.STRUMLINE_X_OFFSET; // same for opponent strumline

      if (PlayState.instance.opponentStrumline.alpha != 1.0) PlayState.instance.opponentStrumline.alpha = 1.0;
      for (opponentStrums in PlayState.instance.opponentStrumline.members) {
        if (opponentStrums.alpha != 1.0) {
          opponentStrums.alpha = 1.0;
        }
        if (Preferences.strumlineBackgroundOpacity != null) PlayState.instance.opponentStrumline.background.alpha = Preferences.strumlineBackgroundOpacity / 100.0;
      }

    }
  }
}

class MovePlayerStrumlineEvent extends ScriptedSongEvent {
  function new() {
    super("extra-events-movePlayerStrumlineEvent");
  }
  
  /**
  * Moves the Player Strumline with easings and being able to fade in/out the opponent's strumline
  **/

  public var eventTitle:String = "Extra Events | Move Player Strumline";

  public var DEFAULT_DIRECTION:String = "center";
  public var DEFAULT_DURATION:Float = 4.0;
  public var DEFAULT_EASE:String = 'linear';
  public var DEFAULT_HIDEOPPONENT_SL:Bool = true; // To avoid strumline overlapping
  public var DEFAULT_OFFSETX:Float = 0.0; // Extra option beyond direction

  public var strumlineTwn:FlxTween = null;

  override function handleEvent(data) {
    if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
    if (PlayState.instance.isMinimalMode) return;
    if (FlxG.onMobile) return;

    var duration:Float = data.getFloat('duration') != null ? data.getFloat('duration') : DEFAULT_DURATION;
    var hideOpponentSL:Bool = data.getBool('hideOpponentSL') != null ? data.getBool('hideOpponentSL') : DEFAULT_HIDEOPPONENT_SL;
    var direction:String = data.getString('direction') != null ? data.getString('direction') : DEFAULT_DIRECTION;
    var offSetX:Float = data.getFloat('offSetX') != null ? data.getFloat('offSetX') : DEFAULT_OFFSETX;

    var ease:String = data.getString('ease') != null ? data.getString('ease') : DEFAULT_EASE;

    var durSeconds = Conductor.instance.stepLengthMs * duration / 1000;
    var easeFunction:Null<Float->Float>;

    if (duration < 0) {
      PolymodErrorHandler.showAlert("Event execution error for " + eventTitle, "Duration cannot be less or equal to 0.\nDuration must be greater than 0.");
      return;
    }

    if (hideOpponentSL) {
      if (PlayState.instance.opponentStrumline != null || PlayState.instance.opponentStrumline.visible) fadeOSL(0.0);
    } else {
      if (PlayState.instance.opponentStrumline != null || PlayState.instance.opponentStrumline.visible) fadeOSL(1.0);
    }

    switch (ease) {
      case 'INSTANT':
        cancelSLTween();
        durSeconds = 0; // I didn't test this
      default:
        easeFunction = ReflectUtil.getAnonymousField(FlxEase, ease);
        if (easeFunction == null){
          // trace("Invalid easing function: " + ease);
        }
        cancelSLTween();

        var targetX:Float;
        var currentPSLPosX = PlayState.instance.playerStrumline.x;
        
        switch (direction) {
          case "center":
            targetX = FlxG.width / 2 - PlayState.instance.playerStrumline.width / 2 + offSetX;
          case "left":
            targetX = Constants.STRUMLINE_X_OFFSET + offSetX; // two offsets bruh
          case "right":
            targetX = FlxG.width / 2 + Constants.STRUMLINE_X_OFFSET + offSetX;

          default:
            targetX = FlxG.width / 2 - PlayState.instance.playerStrumline.width / 2 + offSetX;
          }

        if (targetX != currentPSLPosX) {
          strumlineTwn = FlxTween.tween(PlayState.instance.playerStrumline, {x: targetX}, durSeconds, {ease: easeFunction, onUpdate: function(twn:FlxTween) {
            // Code snippet by comedylost
            // This fixes the hold note covers being mispositioned (they're still mispositioned sometimes but I'm okay with this)
            for (covers in PlayState.instance.playerStrumline.noteHoldCovers) {
              var alpha = covers.alpha;
              var visible = covers.visible;
              covers.revive();
              covers.alpha = alpha;
              covers.visible = visible;
            }
          }});

        }
    }

  }

  function fadeOSL(?alphaTar:Float) {
    if (PlayState.instance.opponentStrumline != null) {
      for (opponentStrums in PlayState.instance.opponentStrumline.members) {
          FlxTween.tween(opponentStrums, {alpha: alphaTar}, Conductor.instance.beatLengthMs / 4000);
          if (alphaTar == 1.0) FlxTween.tween(PlayState.instance.opponentStrumline.background, {alpha: Preferences.strumlineBackgroundOpacity / 100.0}, 1); // Fixes a weird bug
      }
    }
  }

  public function cancelSLTween() {
    if (strumlineTwn != null) strumlineTwn.cancel();
  }

  public override function getIconPath(){
    return 'ui/chart-editor/events/extra-events-movePlayerStrumlineEvent';
  }

  public override function getTitle() {
    return eventTitle;
  }

  override function getEventSchema(){
    return [
      {
        name: 'direction',
        title: 'Direction',
        defaultValue: 'center',
        type: "enum",
        keys: [
          'Left' => 'left',
          'Center' => 'center',
          'Right' => 'right'
        ]
      },
      {
        name: 'duration',
        title: 'Duration',
        defaultValue: 4.0,
        step: 0.5,
        min: 0.5,
        type: "float",
        units: 'steps'
      },
      {
        name: 'ease',
        title: 'Easing Type',
        defaultValue: 'linear',
        type: "enum",
        keys: [
          'Linear' => 'linear',
          'Instant (Ignores Duration)' => 'INSTANT',
          'Sine In' => 'sineIn',
          'Sine Out' => 'sineOut',
          'Sine In/Out' => 'sineInOut',
          'Quad In' => 'quadIn',
          'Quad Out' => 'quadOut',
          'Quad In/Out' => 'quadInOut',
          'Cube In' => 'cubeIn',
          'Cube Out' => 'cubeOut',
          'Cube In/Out' => 'cubeInOut',
          'Quart In' => 'quartIn',
          'Quart Out' => 'quartOut',
          'Quart In/Out' => 'quartInOut',
          'Quint In' => 'quintIn',
          'Quint Out' => 'quintOut',
          'Quint In/Out' => 'quintInOut',
          'Expo In' => 'expoIn',
          'Expo Out' => 'expoOut',
          'Expo In/Out' => 'expoInOut',
          'Smooth Step In' => 'smoothStepIn',
          'Smooth Step Out' => 'smoothStepOut',
          'Smooth Step In/Out' => 'smoothStepInOut',
          'Smoother Step In' => 'smootherStepIn',
          'Smoother Step Out' => 'smootherStepOut',
          'Smoother Step In/Out' => 'smootherStepInOut',
          'Elastic In' => 'elasticIn',
          'Elastic Out' => 'elasticOut',
          'Elastic In/Out' => 'elasticInOut',
          'Back In' => 'backIn',
          'Back Out' => 'backOut',
          'Back In/Out' => 'backInOut',
          'Bounce In' => 'bounceIn',
          'Bounce Out' => 'bounceOut',
          'Bounce In/Out' => 'bounceInOut',
          'Circ In' => 'circIn',
          'Circ Out' => 'circOut',
          'Circ In/Out' => 'circInOut'
        ]
      },
      {
        name: 'hideOpponentSL',
        title: 'Hide Opponent Strumline',
        defaultValue: true,
        type: "bool"
      },
      {
        name: 'offSetX',
        title: 'Offset X',
        defaultValue: 0.0,
        step: 0.1,
        max: 30,
        min: -30,
        type: "float",
        units: 'px'
      }
    ];
  }
}